mysql  cpu飙升怎么办答：1.找到问题  show processlist 找到session  观察语句是否走了索引
2.解决 --- kill 进程， 优化语句

大表如何添加字段？由于添加字段会锁表，所以新建临时表，添加字段后做数据迁移。

大表怎么删除？先删索引再删数据再建索引

分库分表带来哪些问题
事务只能用分布式事务，join groupby,orderby等语句不能用要用代码实现，分布式id


不停机扩容先改配置让数据同时写老库跟新库，再用程序把老数据也存进新库（查询请求先查老数据，查到就存新表），
等两边数据差不多了，再让所有读请求也切到新库，再下线老库

水平分表路由选择
	1. 范围路由 -  id 在（1,100） 范围到table1
	2. hash路由 对某列hash再取模
	3. 路由表 映射 id-->tableid  问题：数据量大路由表又得分表

怎么分库分表
垂直分库 -- 把不同的表放到不同的库
水平分库 -- 根据路由方式确定数据在哪个库
垂直分表 -- 把不同字段放不同表
水平分表 -- 根据路由方式确定数据在哪个表

主从复制原理
主库发生修改后写入binlog,后台线程发送到从库，从库写入relaylog，然后执行sql，然后更新自己的binlog
半同步复制-从库收到返回ack，把异步复制改为同步复制，当出现网络波动恢复后，重新建立半同步，并使用异步复制追赶之前进度
优化为binlog文件服务器：主服务器同时半同步到binlog服务器，当主从复制断开，binlog服务器会同步给从节点
集群：节点间进行同步
MHA:自动进行主备替换

主从复制延迟解决：
读操作也到主机：1.关键业务读操作到主机 2.读从机失败后读主机 3.写后的读操作到主机（代码侵入大）

读写分离的实现
读写分离就是写数据到主机，主机复制binlog到从机，读数据到从机。
1.中间件层-mycat  2.代码层 shardingjdbc

mvcc的实现每行数据都有隐藏字段 trx_id，roll_ptr(指向undolog),事务对一行记录的修改会形成undolog链，
rr级别在事务首次非锁定查会生成readview,rc级别在事务每次非锁定查会生成readview，readview根据当前事务跟数据行的trx_id判断是否可见，
不可见就通过roll_ptr找undolog版本直到可见。

ACID:原子性 通过undolog保证
一致性：通过undolog保证
隔离性：通过锁机制保证
持久性：通过redolog保证

意向锁
想给表加表锁的时候需要判断是否有行被锁定，就直接看能否获得意向锁，可能是意向读锁也可能是意向写锁，所以锁行也会顺带加上意向锁。

行锁实现
锁定读跟更新会加行锁，根据查询范围添加必要粒度的锁，比如行锁锁一行，间隙锁锁区间，临键锁是前两者之和。

索引下推优化
select * from t_user where name like '张%' and age=10; 如果name跟age都是索引，where过滤条件就可以下推给存储引擎提高效率

覆盖索引：查询的字段也就在用到的索引里，不用回表

B树 B+树 hash:
id<500 这种范围查询 用hash几乎无法实现
B+树只在叶子节点存数据，效率更加稳定，路数更多，树的高度更低，第一层是根节点，每层是乘以 16k/（4+6 指针大小），普通二叉树会劣化
成链表

索引注意事项：索引要建在查询多，修改少的字段
索引数量不要过多
索引区分度不能低（比如性别）,
联合索引最左索引区分度不能低
隐式转换,函数,or,like 可能导致索引失效

binlog跟redolog区别
binlog属于mysql server，记录语句，事务结束写入
redolog属于innodb,记录内存页修改，事务中也会频繁写入

一条更新语句怎么执行的
update test set a = 1 where id = 2
先查询缓存看看id = 2的数据，查不到就查磁盘修改a = 1,记录redolog,记录binlog,然后提交redolog(如果不两阶段提交，
少记任何一个文件都导致两个日志不同，一个用于崩溃恢复一个用于主从同步或数据备份恢复，数据不同很难办)

innodb对比mysaym
前者支持行锁，事务，redolog崩溃恢复，后者只支持表锁，并发插入性能低，只有不需要事务的查询场景速度可能优于前者，因为前者二级索引底层是聚簇索引（索引顺序就是数据顺序），需要回表，后者底层是数据地址可直接访问。

一条sql执行流程先由连接器进行鉴权，然后分词解析，然后优化确定执行任务，然后给存储引擎执行。

count(1)、count(*) 与 count(列名) 的区别？
count主键最快，要看列名是不是主键，不是的化count(1)快点